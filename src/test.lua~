require 'paths'
paths.dofile('ref.lua')     -- Parse command line input and do global variable initialization
paths.dofile('model.lua')   -- Read in network model
paths.dofile('train.lua')   -- Load up training/testing functions

-- Set up data loader
torch.setnumthreads(1)
local Dataloader = paths.dofile('util/dataloader.lua')
loader = Dataloader.create(opt, dataset, ref)

-- Initialize logs
ref.log = {}
--ref.log.train = Logger(paths.concat(opt.save, 'train.log'), opt.continue)
--ref.log.valid = Logger(paths.concat(opt.save, 'valid.log'), opt.continue)


--if opt.validIters > 0 then valid() end
  
--collectgarbage()

loader.test = Dataloader(opt, dataset, ref, 'test')
predict()
